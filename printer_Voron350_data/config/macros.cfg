

#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    #G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32
   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)
## Beacon Contact logic (if you have one. 4 lines at 4 locations)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("45")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  ##  Uncomment for Beacon Contact (1 of 4 for beacon contact)
  #SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  #BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    #G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Beacon contact (2 of 4 for beacon contact)
  #G28 Z METHOD=CONTACT CALIBRATE=1                     # Calibrate z offset and beacon model

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  #G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                                # Home Z again after QGL
  _CLEAN_NOZZLE_GANTRY
  CALIBRATE_Z 
  
                                             

  
  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE  ADAPTIVE=1                               # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh


  ## Uncomment for Beacon Contact (3 of 4 for beacon contact)
  #G28 Z METHOD=CONTACT CALIBRATE=0                     # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  ##   Uncomment for Beacon Contact (4 of 4 for beacon contact)
  SET_GCODE_OFFSET Z=0.07                            # Add a little offset for hotend thermal expansion

  #PURGE_BUCKET
  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  #G0 Z0.4                                               # Raise Z to 0.4
  #G91                                                   # Incremental positioning 
  #G1 X100 E20 F1000                                     # Primeline
  
  #G90                                                   # Absolute position
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  CHOME
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro _LOGO_PENDING]
gcode:
  SET_LED LED=rgb_light RED=0.15 GREEN=0.5 BLUE=0.75 WHITE=0 INDEX=1

[gcode_macro _LOGO_READY]
gcode:
  SET_LED LED=rgb_light RED=0.99 GREEN=0.0 BLUE=0.0 WHITE=0 INDEX=1

[gcode_macro _LOGO_OFF]
gcode:
  SET_LED LED=rgb_light RED=0 GREEN=0 BLUE=0 WHITE=0 INDEX=1
  

[gcode_macro _HEADLIGHT_ON]
gcode:
  SET_LED LED=rgb_light RED=1 GREEN=1 BLUE=1 WHITE=1.0 INDEX=2 TRANSMIT=0
  SET_LED LED=rgb_light RED=1 GREEN=1 BLUE=1 WHITE=1.0 INDEX=3


[gcode_macro _HEADLIGHT_OFF]
gcode:
  SET_LED LED=rgb_light RED=0 GREEN=0 BLUE=0 WHITE=0 INDEX=2 TRANSMIT=0
  SET_LED LED=rgb_light RED=0 GREEN=0 BLUE=0 WHITE=0 INDEX=3
  

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set MIN_TEMP = params.TEMP|default(230)|float * 0.98 %}
  {% set CURRENT_TARGET = printer.extruder.target|float %}
  CHOME
  G91                         ; relative positioning
  G1 Z20                      ; move nozzle upwards
  FRONT                       ; move the toolhead to the front
  {% if EXTRUDER_TEMP != 0 %}
    _LOGO_PENDING
    {% if CURRENT_TARGET < EXTRUDER_TEMP %}
      M104 S{EXTRUDER_TEMP} ; only heat up if the current extruder is not already hot
    {% endif %}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP} ; wait for min extrude temp to reach
  {% endif %}
  _LOGO_READY
  M83                         ; set extruder to relative mode
  G1 E10 F300                 ; extrude a little to soften tip
  G1 E-8 F3600                ; quickly retract a small amount to elimate stringing
  G4 P200                     ; pause for a short amount of time
  G1 E-50 F400                ; retract slowly the rest of the way
  G1 E-20 F300
  M400                        ; wait for moves to finish
  M117 Unload Complete!
  _LOGO_OFF

[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  {% set MIN_TEMP = params.TEMP|default(230)|float * 0.98 %}
  {% set CURRENT_TARGET = printer.extruder.target|float %}
  FRONT                       ; move the toolhead to the front
  {% if EXTRUDER_TEMP != 0 %}
    _LOGO_PENDING
    {% if CURRENT_TARGET < EXTRUDER_TEMP %}
      M104 S{EXTRUDER_TEMP} ; only heat up if the current extruder is not already hot
    {% endif %}
    TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={MIN_TEMP} ; wait for min extrude temp to reach
  {% endif %}
  _LOGO_READY
  _HEADLIGHT_ON
  M83                         ; set extruder to relative mode
  G1 E50 F300                 ; extrude slowlyL
  G1 E50 F300
  M400                        ; wait for moves to finish
  M117 Load Complete!
  _LOGO_OFF
  _HEADLIGHT_OFF

[gcode_macro PURGE_BUCKET]
gcode:
    SAVE_GCODE_STATE NAME=PURGE
    G90                    ; absolute
    G0 X75 Y352 Z2         ; go to purge bucket
    G1 X25 E10 F500        ; purge some filament into bucket
    G1 X75 E3 F500         ; purge some filament into bucket
    G0 X120 Y352 F750      ; move across purge brush
    G1 E-2 F500            ; Retract a little
    G1 Z3                  ; Raise and return
    RESTORE_GCODE_STATE NAME=PURGE

[gcode_macro GO_CENTER]
gcode:
   
    G90                    ; absolute
    G0 X175 Y175 Z10         ; go to purge bucket

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  PAUSE_BASE
  _TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####

  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}

  RESUME_BASE {get_params}

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg

  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 2.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true

  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}

  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

[gcode_macro CLEAN_NOZZLE_GANTRY]
gcode:
   SAVE_GCODE_STATE NAME=clean_nozzle_gantry
   G90
   G1 Y300 F18000
   G1 X30 F18000
   G1 Y352 F18000
   G1 X80 F18000
   G1 X46 F18000
   G1 X80 F18000
   G1 X46 F18000
   G1 X80 F18000
   RESTORE_GCODE_STATE NAME=clean_nozzle_gantry MOVE=1

[gcode_macro PRIMING]
gcode:
    M106 S255                      ;partcooling fan max
    CLEAN                          ;call clean macro
    G1  X5 Y5 F15000               ;move to purge position
    G1  Z0.3 F3000                 ;move to purge position
    G91                            ;incremental positioning
    G1  Z0.2 E30 F3                ;prime hotend
    G1  Z2.0 E25 F30               ;purge and move up
    G1  Z4.0 E20 F60               ;purge and move up
    G1  Z2.0 E10 F240              ;purge and move up
    G1  Z10 F3000                  ;move up by 10
    G1  Y55 Z-18.25 F3000          ;move to wiping start
    G1  Y10 F3000                  ;wipe back
    G1  Y-10 F3000                 ;wipe forth
    G1  Y10 F3000                  ;wipe back
    G1  Y-10 F3000                 ;wipe forth
    G1  Y-55 F3000                 ;wipe end and kick off the poop pellet
    M107                           ;turn cooling fan off
    G1  Z2.0  F3000                ;move up
    M82                            ;extruder absolute
    G92 E0.0                       ;extruder reset
    G90                            ;absolute positioning
    M107                           ;partcooling fan off

    #------------------------------------------------------------------------

[gcode_macro CLEAN]
gcode:
    M204 S6000                     ;set acceleration to 6000
    G1 X5 Y35 F15000               ;move to position
    G1 Z0.5 F3000                  ;move to position
    G1 Y1 F10000                   ;kick the prime tower off
    
    #------------------------------------------------------------------------